#include<iostream>
#include<fstream>
#include<cstdlib>
#include<string>
#include<vector>
#include <math.h> 

struct EulerAngles{
  double phi_one;
  double phi;
  double phi_two;
  double h;
  double k;
  double l;  
}; 

void ReadData(std::vector<EulerAngles> *GrainOrientations){
  EulerAngles euler_angles;
  euler_angles.h=0;
  euler_angles.k=0;
  euler_angles.l=0;
  std::ifstream ifs("RandomNew.td", std::ios::in);  
  while(ifs>>euler_angles.phi_one>>euler_angles.phi>>euler_angles.phi_two){
    (*GrainOrientations).push_back(euler_angles); 
  }
  ifs.close();
}

int main(){
  std::vector<EulerAngles> GrainOrientations;
  ReadData(&GrainOrientations);
/*
  for(int i=0; i<GrainOrientations.size(); i++)
    std::cout<<GrainOrientations[i].phi_one<<" "<<GrainOrientations[i].phi<<" "<<GrainOrientations[i].phi_two<<std::endl;*/
  double hh=0.0, kk=0.0, ll=0.0;
  double n=1;
  double tol=0.05;
  for(int i=0; i<GrainOrientations.size(); i++){
    hh=sin(GrainOrientations[i].phi)*sin(GrainOrientations[i].phi_two);
    kk=sin(GrainOrientations[i].phi)*cos(GrainOrientations[i].phi_two);
    ll=cos(GrainOrientations[i].phi);
    GrainOrientations[i].h=hh;
    GrainOrientations[i].k=kk;
    GrainOrientations[i].l=ll;
    std::cout<<GrainOrientations[i].h<<" "<<GrainOrientations[i].k<<" "<<GrainOrientations[i].l<<std::endl;
  }
/*
  for(int i=0; i<GrainOrientations.size(); i++)
    std::cout<<GrainOrientations[i].h<<" "<<GrainOrientations[i].k<<" "<<GrainOrientations[i].l<<std::endl;*/
  double cosine_angle_difference=


return 0;
}
